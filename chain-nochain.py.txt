class Data:
    def __init__(self, key, value):
        self.key = key
        self.value = value
        self.chain = -1

class Hashing:
    def __init__(self):
        self.size = int(input("Enter size of the table: "))
        self._table = [Data(-1, -1) for _ in range(self.size)]

    def display(self):
        print("Index\tKey\tValue\tChain")
        for i in range(self.size):
            print(f"{i}\t{self._table[i].key}\t{self._table[i].value}\t{self._table[i].chain}")

    def insert(self, k, v):   
        index = k % self.size 
        
        if self._table[index].key == -1: 
            self._table[index] = Data(k, v)
            print(f"{k} inserted at {index}'th index")
        else:
            for i in range(1, self.size):
                index = (k + i) % self.size
                if self._table[index].key == -1:
                    j = 0
                    while j < self.size:
                        if (self._table[j].key) % self.size == k % self.size and self._table[j].chain == -1:
                            self._table[j].chain = index
                            break
                        j += 1

                    self._table[index] = Data(k, v)
                    print(f"{k} inserted at {index}'th index")
                    break
            else:
                print("Record Insertion Failed")

    def search(self, key):
        count = 1
        for i in range(self.size):
            index = (key + i) % self.size
            if self._table[index].key == key:
                print(f"\n{key} found at {index}'th index")
                print(f"Value stored at {key} = {self._table[index].value}")
                print("%d comparisons required" % count)
                return index
            elif self._table[index].chain != -1:
                while self._table[index].chain != -1:
                    if self._table[self._table[index].chain].key == key:
                        print("With the help of Chaining", index)
                        print("\n%d found at index %d" % (key, index))
                        print("Value stored at %d = %s" % (key, self._table[index].value))
                        print("%d comparisons required" % count)
                        return self._table[index].chain
                    index = self._table[index].chain
            else:
                count += 1
        else:
            print("Record not found.")
            return -1

    def deleteKey(self, key):
        index = self.search(key)
        if index != -1:
            self._table[index].key = -1
            self._table[index].value = -1
            chain_val = self._table[index].chain
            self._table[index].chain = -1
            j = 0
            while j < self.size:
                if self._table[j].chain == index:
                    self._table[j].chain = chain_val
                    print("Key deleted.")
                    return
                j += 1

h = Hashing()
while True:
    opt = int(input("\n------------------**MENU**------------------\n1) Insert Data.\n2) Display Record.\n3) Search Record.\n4) Exit.\n"))
    if opt == 1:
        key = int(input("Enter Key: "))
        v = input("Enter Value for key: ")
        h.insert(key, v)
    elif opt == 2:
        h.display()
    elif opt == 3:
        key = int(input("Enter Key: "))
        h.search(key)
    elif opt == 4:
        break
    else:
        print("Invalid Option")

